openapi: 3.1.0
info:
  title: CodyLab Talent 2025 API
  description: API per la gestione del progetto CodyLab Talent 2025.
  version: 1.0.0
servers:
  - url: https://localhost:8090/api/v1
    description: Server locale di sviluppo
tags:
  - name: Projects
    description: Operazioni sui progetti
  - name: Tasks
    description: Operazioni sulle task
  - name: Users
    description: Operazioni sugli utenti
  - name: Slots
    description: Operazioni sugli slot
paths:
  #  projects
  /projects:
    get:
      summary: Recupera tutti i progetti
      description: Restituisce una lista di oggetti Project.
      operationId: getProjects
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
        - name: ProjectFilter
          in: query
          description: Filtro per i progetti basato su ID utente o ID progetto.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/ProjectFilter'
      responses:
        '200':
          description: Lista di progetti recuperata con successo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Projects'
        '204':
          description: Nessun progetto trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      summary: Crea un nuovo progetto
      description: Crea un nuovo progetto e restituisce l'oggetto Project creato.
      operationId: createProject
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Projects'
      responses:
        '201':
          description: Progetto creato con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '400':
          description: Richiesta non valida.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /projects/{id}:
    get:
      summary: Recupera un progetto tramite il suo ID
      description: Restituisce l'oggetto Project corrispondente all'ID fornito.
      operationId: getProjectById
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          description: Identificativo univoco del progetto.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Progetto recuperato con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '404':
          description: Progetto non trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      summary: Aggiorna un progetto esistente
      description: Aggiorna i dettagli di un progetto esistente e restituisce l'oggetto Project aggiornato.
      operationId: updateProject
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          description: Identificativo univoco del progetto da aggiornare.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Projects'
      responses:
        '200':
          description: Progetto aggiornato con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '400':
          description: Richiesta non valida.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Progetto non trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      summary: Elimina un progetto tramite il suo ID
      description: Elimina il progetto corrispondente all'ID fornito.
      operationId: deleteProject
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          description: Identificativo univoco del progetto da eliminare.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Progetto eliminato con successo.
        '404':
          description: Progetto non trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  #  tasks
  /tasks:
    get:
      summary: Recupera tutte le task
      description: Restituisce una lista di oggetti Task.
      operationId: getTasks
      tags:
        - Tasks
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
        - name: TaskFilter
          in: query
          description: Filtro per le task basato su ID utente o ID task.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TaskFilter'
      responses:
        '200':
          description: Lista di task recuperata con successo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tasks'
        '204':
          description: Nessuna task trovata.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      summary: Crea una nuova task
      description: Crea una nuova task e restituisce l'oggetto Task creato.
      operationId: createTask
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tasks'
      responses:
        '201':
          description: Task creata con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '400':
          description: Richiesta non valida.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /tasks/{id}:
    get:
      summary: Recupera una task tramite il suo ID
      description: Restituisce l'oggetto Task corrispondente all'ID fornito.
      operationId: getTaskById
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          description: Identificativo univoco della task.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task recuperata con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '404':
          description: Task non trovata.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      summary: Aggiorna una task esistente
      description: Aggiorna i dettagli di una task esistente e restituisce l'oggetto Task aggiornato.
      operationId: updateTask
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          description: Identificativo univoco della task da aggiornare.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tasks'
      responses:
        '200':
          description: Task aggiornata con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '400':
          description: Richiesta non valida.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Task non trovata.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      summary: Elimina una task tramite il suo ID
      description: Elimina la task corrispondente all'ID fornito.
      operationId: deleteTask
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          description: Identificativo univoco della task da eliminare.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task eliminata con successo.
        '404':
          description: Task non trovata.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  #  users
  /users:
    get:
      summary: Recupera tutti gli utenti
      description: Restituisce una lista di oggetti User.
      operationId: getUsers
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
        - name: UserFilter
          in: query
          description: Filtro per gli utenti basato su ID utente o ID task.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/UserFilter'
      responses:
        '200':
          description: Lista di utenti recuperata con successo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '204':
          description: Nessun utente trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      summary: Crea un nuovo utente
      description: Crea un nuovo utente e restituisce l'oggetto User creato.
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '201':
          description: Utente creato con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Richiesta non valida.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /users/{id}:
    get:
      summary: Recupera un utente tramite il suo ID
      description: Restituisce l'oggetto User corrispondente all'ID fornito.
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: Identificativo univoco dell'utente.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Utente recuperato con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '404':
          description: Utente non trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      summary: Aggiorna un utente esistente
      description: Aggiorna i dettagli di un utente esistente e restituisce l'oggetto User aggiornato.
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: Identificativo univoco dell'utente da aggiornare.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '200':
          description: Utente aggiornato con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Richiesta non valida.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Utente non trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      summary: Elimina un utente tramite il suo ID
      description: Elimina l'utente corrispondente all'ID fornito.
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: Identificativo univoco dell'utente da eliminare.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Utente eliminato con successo.
        '404':
          description: Utente non trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  #  slots
  /slots:
    get:
      summary: Recupera tutti gli slot
      description: Restituisce una lista di oggetti Slot.
      operationId: getSlots
      tags:
        - Slots
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
        - name: SlotFilter
          in: query
          description: Filtro per gli slot basato su ID task o ID slot.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/SlotFilter'
      responses:
        '200':
          description: Lista di slot recuperata con successo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Slots'
        '204':
          description: Nessuno slot trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      summary: Crea un nuovo slot
      description: Crea un nuovo slot e restituisce l'oggetto Slot creato.
      operationId: createSlot
      tags:
        - Slots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slots'
      responses:
        '201':
          description: Slot creato con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slots'
        '400':
          description: Richiesta non valida.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  /users/{id}/progettiGestiti:
    get:
      summary: Recupera un utente con i progetti gestiti
      description: Restituisce l’utente e i suoi progetti gestiti
      operationId: getUserWithProgettiGestiti
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: ID dell’utente
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Utente con progetti gestiti recuperato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'  # O uno schema User con progettiGestiti incluso
        '404':
          description: Utente non trovato
        '500':
          description: Errore interno del server
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'


  /slots/{id}:
    get:
      summary: Recupera uno slot tramite il suo ID
      description: Restituisce l'oggetto Slot corrispondente all'ID fornito.
      operationId: getSlotById
      tags:
        - Slots
      parameters:
        - name: id
          in: path
          description: Identificativo univoco dello slot.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Slot recuperato con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slots'
        '404':
          description: Slot non trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      summary: Aggiorna uno slot esistente
      description: Aggiorna i dettagli di uno slot esistente e restituisce l'oggetto Slot aggiornato.
      operationId: updateSlot
      tags:
        - Slots
      parameters:
        - name: id
          in: path
          description: Identificativo univoco dello slot da aggiornare.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slots'
      responses:
        '200':
          description: Slot aggiornato con successo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slots'
        '400':
          description: Richiesta non valida.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Slot non trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      summary: Elimina uno slot tramite il suo ID
      description: Elimina lo slot corrispondente all'ID fornito.
      operationId: deleteSlot
      tags:
        - Slots
      parameters:
        - name: id
          in: path
          description: Identificativo univoco dello slot da eliminare.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Slot eliminato con successo.
        '404':
          description: Slot non trovato.
        '500':
          description: Errore interno del server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'


components:
  headers:
    total-count:
      description: Total number of items in the response
      schema:
        type: integer
        format: int32
        examples:
          - value: 100
            summary: Total count of vehicles
    page-size:
      description: Number of items per page
      schema:
        type: integer
        format: int32
        examples:
          - value: 10
            summary: Default page size for vehicle listings
    page-number:
      description: Current page number (from 0)
      schema:
        type: integer
        format: int32
        examples:
          - value: 0
            summary: Current page number in the response

  parameters:
    PageNumber:
      name: pageNumber
      in: query
      description: Numero della pagina da recuperare.
      required: false
      schema:
        type: integer
        format: int32
        default: 0
        examples:
          - value: 0
            summary: Pagina iniziale

    Size:
      name: size
      in: query
      description: Numero di elementi per pagina.
      required: false
      schema:
        type: integer
        format: int32
        default: 10
        examples:
          - value: 10
            summary: Dimensione della pagina
    Sort:
      name: sort
      in: query
      description: Criterio di ordinamento dei risultati.
      required: false
      schema:
        type: string
        examples:
          - value: 'id,asc'
            summary: Ordinamento per ID in ordine ascendente

  schemas:
    Projects:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identificativo univoco del progetto.
        codice:
          type: string
          maxLength: 10
          description: Codice identificativo del progetto.
        nome:
          type: string
          description: Nome del progetto.
        descrizione:
          type: string
          description: Descrizione del progetto.
        dataInizio:
          type: string
          format: date
          description: Data di inizio del progetto.
          examples:
            - value: '2025-01-01'
              summary: Data di inizio del progetto
        durata:
          type: integer
          description: Durata del progetto in giorni.
        responsabile:
          type: string
          description: Nome del responsabile del progetto.
    Tasks:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identificativo univoco della task.
        projectId:
          type: integer
          format: int64
          description: ID del progetto a cui appartiene la task.
        codice:
          type: string
          maxLength: 10
          description: Codice identificativo della task.
        nome:
          type: string
          description: Nome della task.
        descrizione:
          type: string
          description: Descrizione della task.
        dataInizio:
          type: string
          format: date
          description: Data di inizio della task.
          examples:
            - value: '2025-01-01'
              summary: Data di inizio della task
        durata:
          type: integer
          description: Durata della task in giorni.

    Users:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identificativo univoco dell'utente.
        nome:
          type: string
          description: Nome dell'utente.
        cognome:
          type: string
          description: Cognome dell'utente.
        username:
          type: string
          description: Nome utente per l'accesso.
        mail:
          type: string
          format: email
          description: Indirizzo email dell'utente.
        profilo:
          type: string
          description: Profilo dell'utente (es. amministratore, utente standard).
        orarioGiornaliero:
          type: integer
          description: Ore lavorative giornaliere dell'utente.
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Projects'

    Slots:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identificativo univoco dello slot.
        taskId:
          type: integer
          format: int64
          description: ID della task a cui appartiene lo slot.
        dataInizio:
          type: string
          format: date
          description: Data di inizio dello slot.
        dataFine:
            type: string
            format: date
            description: Data di fine dello slot.
        durata:
            type: integer
            description: Durata dello slot in minuti.

    ProjectFilter:
      type: object
      properties:
        username:
          type: string
          description: username dell'utente associato al progetto.
        projectCodes:
          type: array
          items:
            type: string
          description: Elenco dei codici dei progetti da filtrare.

    TaskFilter:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          description: ID dell'utente associato alla task.
        ids:
          type: array
          items:
            type: integer
            format: int64
          description: Elenco degli ID delle task da filtrare.


    UserFilter:
        type: object
        properties:
            ids:
              type: array
              items:
                  type: integer
                  format: int64
              description: Elenco degli ID degli utenti da filtrare.
            taskId:
              type: integer
              format: int64
              description: ID della task associata all'utente.

    SlotFilter:
      type: object
      properties:
        taskId:
          type: integer
          format: int64
          description: ID della task associata allo slot.
        ids:
          type: array
          items:
            type: integer
            format: int64
          description: Elenco degli ID degli slot da filtrare.

    Problem:
      description: error occurred - see status code and problem object for more information.
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: "about:blank"
          example: "https://zalando.github.io/problem/constraint-violation"
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
        errorCategory:
          type: string
          description: The category of the error.
          example: Invalid
        fieldName:
          type: string
          description: The name of the field that caused the error.
          example: phone
        timestamp:
          type: string
          format: date-time
          description: The timestamp when the error occurred.
          example: "2024-11-13T10:42:21.263191453Z"
        traceId:
          type: string
          description: The trace ID for the error.
          example: "057b351ca8e8badf158357ecbb2edb73"